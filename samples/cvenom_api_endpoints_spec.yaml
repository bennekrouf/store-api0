# CV Generator API Endpoints Specification

**Base URL:** `http://localhost:4002/api`

## Authentication
All protected endpoints require Firebase Authentication via Bearer token:
```
Authorization: Bearer <firebase-id-token>
```

## Public Endpoints

### GET /health
Health check endpoint.
- **Auth:** None required
- **Response:** `"OK"`

### GET /templates
Get available CV templates.
- **Auth:** None required
- **Response:**
```json
{
  "success": true,
  "templates": [
    {
      "name": "default",
      "description": "Standard CV layout"
    },
    {
      "name": "keyteo", 
      "description": "CV with Keyteo branding and logo at the top of every page"
    },
    {
      "name": "keyteo_full",
      "description": "CV with Keyteo branding featuring structured context and detailed responsibilities sections"
    }
  ]
}
```

### OPTIONS /<path>
CORS preflight handler for all routes.
- **Auth:** None required
- **Response:** HTTP 200

## Protected Endpoints

### POST /generate
Generate CV PDF.
- **Auth:** Required (Firebase + tenant validation)
- **Content-Type:** `application/json`
- **Request Body:**
```json
{
  "person": "john-doe",
  "lang": "en",        // Optional, defaults to "en" 
  "template": "keyteo" // Optional, defaults to "default"
}
```
- **Response:** PDF file (Content-Type: application/pdf)
- **Error Response:**
```json
{
  "success": false,
  "error": "Error message",
  "signup_required": true // Optional
}
```

### POST /create
Create person directory structure.
- **Auth:** Required (Firebase + tenant validation)
- **Content-Type:** `application/json`
- **Request Body:**
```json
{
  "person": "john-doe"
}
```
- **Response:**
```json
{
  "success": true,
  "message": "Person directory created successfully for john-doe",
  "person_dir": "/path/to/tenant/john-doe",
  "created_by": "user@example.com",
  "tenant": "tenant-name"
}
```

### POST /upload-picture
Upload profile picture for a person.
- **Auth:** Required (Firebase + tenant validation)
- **Content-Type:** `multipart/form-data`
- **Form Data:**
  - `person`: string (person name)
  - `file`: file (image file - PNG, JPG, etc.)
- **Response:**
```json
{
  "success": true,
  "message": "Profile picture uploaded successfully for john-doe",
  "file_path": "/path/to/tenant/john-doe/profile.png",
  "tenant": "tenant-name"
}
```

### GET /me
Get current authenticated user and tenant information.
- **Auth:** Required (Firebase + tenant validation)
- **Response:**
```json
{
  "success": true,
  "user": {
    "uid": "firebase-user-id",
    "email": "user@example.com",
    "name": "User Name",
    "picture": "https://profile-pic-url",
    "tenant_name": "tenant-name"
  },
  "message": "User authenticated successfully for tenant: tenant-name"
}
```
- **Error Response (unauthenticated):**
```json
{
  "success": false,
  "error": "Authentication required or user not authorized for any tenant",
  "signup_required": true
}
```

### GET /files/tree
Get tenant's file tree structure.
- **Auth:** Required (Firebase + tenant validation)
- **Response:**
```json
{
  "person-name": {
    "type": "folder",
    "children": {
      "cv_params.toml": {
        "type": "file",
        "size": 1024,
        "modified": "2023-01-01T00:00:00Z"
      },
      "experiences_en.typ": {
        "type": "file",
        "size": 2048,
        "modified": "2023-01-01T00:00:00Z"
      }
    }
  }
}
```

### GET /files/content?path=<file-path>
Get content of a specific file.
- **Auth:** Required (Firebase + tenant validation)
- **Query Parameters:**
  - `path`: File path relative to tenant directory (e.g., "john-doe/cv_params.toml")
- **Security:** Only allows `.typ` and `.toml` files
- **Response:** Raw file content as text
- **Error:** HTTP 403 for unauthorized files, HTTP 404 for missing files

### POST /files/save
Save content to a file.
- **Auth:** Required (Firebase + tenant validation)
- **Content-Type:** `application/json`
- **Request Body:**
```json
{
  "path": "john-doe/cv_params.toml",
  "content": "file content here"
}
```
- **Security:** Only allows `.typ` and `.toml` files
- **Response:**
```json
{
  "success": true,
  "message": "File saved successfully"
}
```



###Â Evaluate am i a good fit for this job
# Job fit analysis
curl -X POST http://localhost:4002/api/analyze-job-fit \
  -H "Authorization: Bearer <firebase-id-token>" \
  -H "Content-Type: application/json" \
  -d '{
    "job_url": "https://www.linkedin.com/jobs/view/1234567890",
    "person_name": "john-doe"
  }'



## Error Handling

### Authentication Errors
- **HTTP 401:** Missing or invalid Firebase token
- **HTTP 403:** User not authorized for tenant

### Validation Errors  
- **HTTP 400:** Invalid request body or parameters
- **HTTP 404:** Person/file not found

### Server Errors
- **HTTP 500:** Internal server error (database, file system, compilation)

## CORS Configuration
- **Origin:** `*` (all origins allowed)
- **Methods:** `POST, GET, PATCH, OPTIONS`
- **Headers:** `*` (all headers allowed)
- **Credentials:** `true`

## Multi-Tenant Architecture
- Users must be registered in SQLite tenant database
- Each tenant has isolated data directory: `data/tenants/{tenant-name}/`
- Person directories are created within tenant space
- File operations are scoped to tenant's data directory only

## Available Languages
- `en` (English) - default
- `fr` (French)

## Available Templates
- `default` - Standard CV layout
- `keyteo` - Keyteo branded template
- `keyteo_full` - Enhanced Keyteo template with structured experiences

## File Types Supported
- **Editable:** `.typ` (Typst templates), `.toml` (configuration)
- **Uploadable:** Image files (PNG, JPG, etc.) for profile pictures
- **Generated:** PDF files for CV output





# Backend Payment API Specification

This document outlines the required backend API endpoints for Stripe payment integration and credit management.

## Environment Variables Required

```bash
# Stripe Configuration
STRIPE_PUBLISHABLE_KEY=pk_live_... # or pk_test_... for development
STRIPE_SECRET_KEY=sk_live_...      # or sk_test_... for development
STRIPE_WEBHOOK_SECRET=whsec_...    # For webhook verification

# Frontend Configuration (to be added to env.local)
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_live_... # or pk_test_...
```

## API Endpoints

### 1. Create Payment Intent

**Endpoint:** `POST /api/payments/intent`

**Headers:**
- `Content-Type: application/json`
- `X-Firebase-Auth: <firebase_id_token>`

**Request Body:**
```json
{
  "amount": 2500,           // Amount in cents ($25.00)
  "currency": "usd",        // Currency code
  "email": "user@example.com",
  "metadata": {             // Optional
    "source": "web_app",
    "timestamp": "2024-01-01T00:00:00Z"
  }
}
```

**Response (Success - 200):**
```json
{
  "success": true,
  "client_secret": "pi_1234567890_secret_abcdef",
  "payment_intent_id": "pi_1234567890",
  "message": "Payment intent created successfully"
}
```

**Response (Error - 400/500):**
```json
{
  "success": false,
  "message": "Invalid amount or currency",
  "error_code": "INVALID_AMOUNT"
}
```

**Implementation Notes:**
- Validate amount (minimum $1.00, maximum $10,000.00)
- Create Stripe PaymentIntent with automatic payment methods
- Store payment intent in database with user email
- Return client_secret for frontend confirmation

### 2. Confirm Payment and Add Credits

**Endpoint:** `POST /api/payments/confirm`

**Headers:**
- `Content-Type: application/json`
- `X-Firebase-Auth: <firebase_id_token>`

**Request Body:**
```json
{
  "payment_intent_id": "pi_1234567890",
  "email": "user@example.com",
  "amount": 25.00           // Amount in dollars for verification
}
```

**Response (Success - 200):**
```json
{
  "success": true,
  "message": "Payment confirmed and credits added",
  "new_balance": 75.50,     // Updated user balance
  "transaction_id": "txn_abc123",
  "amount_added": 25.00
}
```

**Response (Error):**
```json
{
  "success": false,
  "message": "Payment not found or already processed",
  "error_code": "PAYMENT_NOT_FOUND"
}
```

**Implementation Notes:**
- Verify payment intent exists and succeeded with Stripe
- Check payment hasn't been processed already (idempotent)
- Add credits to user's account balance in database
- Create transaction record for audit trail
- Send confirmation email (optional)

### 3. Get Payment History

**Endpoint:** `GET /api/payments/history/{email}?limit=50`

**Headers:**
- `X-Firebase-Auth: <firebase_id_token>`

**Query Parameters:**
- `limit` (optional): Number of records to return (default: 50, max: 100)
- `offset` (optional): Pagination offset (default: 0)

**Response (Success - 200):**
```json
{
  "success": true,
  "payments": [
    {
      "id": "pi_1234567890",
      "amount": 2500,         // Amount in cents
      "currency": "usd",
      "status": "succeeded",  // succeeded, pending, failed
      "created_at": "2024-01-01T12:00:00Z",
      "description": "API Credits Purchase"
    }
  ],
  "total_count": 15,
  "message": "Payment history retrieved successfully"
}
```

**Implementation Notes:**
- Return payments in descending chronological order
- Include pagination metadata
- Filter by user email from Firebase auth
- Convert amounts from cents to dollars in frontend

### 4. Cancel Payment Intent (Optional)

**Endpoint:** `POST /api/payments/cancel/{payment_intent_id}`

**Headers:**
- `X-Firebase-Auth: <firebase_id_token>`

**Response (Success - 200):**
```json
{
  "success": true,
  "message": "Payment intent cancelled successfully"
}
```

**Implementation Notes:**
- Cancel payment intent with Stripe if still possible
- Update local database record
- Only allow cancellation by the payment owner

## Database Schema

### payments table
```sql
CREATE TABLE payments (
    id VARCHAR(255) PRIMARY KEY,           -- Stripe payment_intent_id
    user_email VARCHAR(255) NOT NULL,     -- From Firebase auth
    amount_cents INTEGER NOT NULL,        -- Amount in cents
    currency VARCHAR(3) NOT NULL DEFAULT 'usd',
    status VARCHAR(50) NOT NULL,           -- pending, succeeded, failed, cancelled
    stripe_payment_intent_id VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    metadata JSONB,                        -- Additional data
    INDEX idx_user_email (user_email),
    INDEX idx_created_at (created_at),
    INDEX idx_status (status)
);
```

### user_credits table (or add to existing users table)
```sql
-- If separate table:
CREATE TABLE user_credits (
    user_email VARCHAR(255) PRIMARY KEY,
    balance_cents INTEGER DEFAULT 0,      -- Credits in cents for precision
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Or add to existing users table:
ALTER TABLE users ADD COLUMN credit_balance_cents INTEGER DEFAULT 0;
```

### transactions table (for audit trail)
```sql
CREATE TABLE transactions (
    id SERIAL PRIMARY KEY,
    user_email VARCHAR(255) NOT NULL,
    type VARCHAR(50) NOT NULL,             -- credit_purchase, api_usage, refund
    amount_cents INTEGER NOT NULL,        -- Positive for credits, negative for usage
    balance_after_cents INTEGER NOT NULL, -- Balance after this transaction
    reference_id VARCHAR(255),            -- payment_intent_id or usage_id
    description TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    INDEX idx_user_email (user_email),
    INDEX idx_created_at (created_at),
    INDEX idx_type (type)
);
```

## Webhook Handling (Recommended)

### Stripe Webhook Endpoint
**Endpoint:** `POST /api/webhooks/stripe`

**Implementation Notes:**
- Verify webhook signature using Stripe webhook secret
- Handle `payment_intent.succeeded` events
- Update payment status in database
- Add credits to user account if not already processed
- Handle failed/cancelled payments

**Events to Handle:**
- `payment_intent.succeeded`
- `payment_intent.payment_failed`
- `payment_intent.canceled`

## Security Considerations

1. **Authentication**: Validate Firebase ID token on all endpoints
2. **Authorization**: Ensure users can only access their own data
3. **Webhook Security**: Verify Stripe webhook signatures
4. **Idempotency**: Prevent duplicate credit additions
5. **Amount Validation**: Validate amounts match between frontend and Stripe
6. **Rate Limiting**: Implement rate limits on payment endpoints
7. **Logging**: Log all payment operations for audit trail

## Error Handling

### Standard Error Codes:
- `INVALID_AMOUNT`: Amount out of allowed range
- `PAYMENT_NOT_FOUND`: Payment intent doesn't exist
- `ALREADY_PROCESSED`: Payment already confirmed
- `INSUFFICIENT_FUNDS`: For future usage deduction
- `STRIPE_ERROR`: Stripe API returned an error
- `AUTHENTICATION_FAILED`: Invalid Firebase token

## Testing

### Test Cards (Stripe Test Mode):
- Success: `4242424242424242`
- Decline: `4000000000000002`
- 3D Secure: `4000002500003155`

### Environment Setup:
1. Use Stripe test keys in development
2. Test webhook endpoints with Stripe CLI
3. Verify Firebase authentication integration
4. Test credit balance updates
5. Verify payment history retrieval

## Integration Steps

1. **Setup Stripe Account**: Create Stripe account and get API keys
2. **Configure Webhooks**: Set up webhook endpoint in Stripe dashboard
3. **Database Setup**: Create required tables
4. **Environment Variables**: Configure all required environment variables
5. **Testing**: Test with Stripe test cards
6. **Production**: Switch to live Stripe keys for production

## Frontend Integration

The frontend payment system expects these exact endpoint URLs and response formats. The components are already implemented and will work with this API specification.

Required environment variable in `.env.local`:
```
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_...
```
